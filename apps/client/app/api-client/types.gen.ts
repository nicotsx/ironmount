// This file is auto-generated by @hey-api/openapi-ts

export type RegisterData = {
	body?: {
		password: string;
		username: string;
	};
	path?: never;
	query?: never;
	url: "/api/v1/auth/register";
};

export type RegisterErrors = {
	/**
	 * Invalid request or username already exists
	 */
	400: unknown;
};

export type RegisterResponses = {
	/**
	 * User created successfully
	 */
	201: {
		message: string;
		success: boolean;
		user?: {
			id: number;
			username: string;
		};
	};
};

export type RegisterResponse = RegisterResponses[keyof RegisterResponses];

export type LoginData = {
	body?: {
		password: string;
		username: string;
	};
	path?: never;
	query?: never;
	url: "/api/v1/auth/login";
};

export type LoginErrors = {
	/**
	 * Invalid credentials
	 */
	401: unknown;
};

export type LoginResponses = {
	/**
	 * Login successful
	 */
	200: {
		message: string;
		success: boolean;
		user?: {
			id: number;
			username: string;
		};
	};
};

export type LoginResponse = LoginResponses[keyof LoginResponses];

export type LogoutData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/auth/logout";
};

export type LogoutResponses = {
	/**
	 * Logout successful
	 */
	200: {
		success: boolean;
	};
};

export type LogoutResponse = LogoutResponses[keyof LogoutResponses];

export type GetMeData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/auth/me";
};

export type GetMeResponses = {
	/**
	 * Current user information
	 */
	200: {
		message: string;
		success: boolean;
		user?: {
			id: number;
			username: string;
		};
	};
};

export type GetMeResponse = GetMeResponses[keyof GetMeResponses];

export type GetStatusData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/auth/status";
};

export type GetStatusResponses = {
	/**
	 * Authentication system status
	 */
	200: {
		hasUsers: boolean;
	};
};

export type GetStatusResponse = GetStatusResponses[keyof GetStatusResponses];

export type ListVolumesData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/volumes";
};

export type ListVolumesResponses = {
	/**
	 * A list of volumes
	 */
	200: {
		volumes: Array<{
			autoRemount: boolean;
			config:
				| {
						backend: "directory";
				  }
				| {
						backend: "nfs";
						exportPath: string;
						server: string;
						version: "3" | "4" | "4.1";
						port?: number;
				  }
				| {
						backend: "smb";
						password: string;
						server: string;
						share: string;
						username: string;
						vers?: "1.0" | "2.0" | "2.1" | "3.0";
						port?: number;
						domain?: string;
				  }
				| {
						backend: "webdav";
						path: string;
						server: string;
						port?: number;
						password?: string;
						ssl?: boolean;
						username?: string;
				  };
			createdAt: number;
			id: number;
			lastError: string | null;
			lastHealthCheck: number;
			name: string;
			path: string;
			status: "error" | "mounted" | "unmounted";
			type: "directory" | "nfs" | "smb" | "webdav";
			updatedAt: number;
		}>;
	};
};

export type ListVolumesResponse = ListVolumesResponses[keyof ListVolumesResponses];

export type CreateVolumeData = {
	body?: {
		config:
			| {
					backend: "directory";
			  }
			| {
					backend: "nfs";
					exportPath: string;
					server: string;
					version: "3" | "4" | "4.1";
					port?: number;
			  }
			| {
					backend: "smb";
					password: string;
					server: string;
					share: string;
					username: string;
					vers?: "1.0" | "2.0" | "2.1" | "3.0";
					port?: number;
					domain?: string;
			  }
			| {
					backend: "webdav";
					path: string;
					server: string;
					port?: number;
					password?: string;
					ssl?: boolean;
					username?: string;
			  };
		name: string;
	};
	path?: never;
	query?: never;
	url: "/api/v1/volumes";
};

export type CreateVolumeResponses = {
	/**
	 * Volume created successfully
	 */
	201: {
		autoRemount: boolean;
		config:
			| {
					backend: "directory";
			  }
			| {
					backend: "nfs";
					exportPath: string;
					server: string;
					version: "3" | "4" | "4.1";
					port?: number;
			  }
			| {
					backend: "smb";
					password: string;
					server: string;
					share: string;
					username: string;
					vers?: "1.0" | "2.0" | "2.1" | "3.0";
					port?: number;
					domain?: string;
			  }
			| {
					backend: "webdav";
					path: string;
					server: string;
					port?: number;
					password?: string;
					ssl?: boolean;
					username?: string;
			  };
		createdAt: number;
		id: number;
		lastError: string | null;
		lastHealthCheck: number;
		name: string;
		path: string;
		status: "error" | "mounted" | "unmounted";
		type: "directory" | "nfs" | "smb" | "webdav";
		updatedAt: number;
	};
};

export type CreateVolumeResponse = CreateVolumeResponses[keyof CreateVolumeResponses];

export type TestConnectionData = {
	body?: {
		config:
			| {
					backend: "directory";
			  }
			| {
					backend: "nfs";
					exportPath: string;
					server: string;
					version: "3" | "4" | "4.1";
					port?: number;
			  }
			| {
					backend: "smb";
					password: string;
					server: string;
					share: string;
					username: string;
					vers?: "1.0" | "2.0" | "2.1" | "3.0";
					port?: number;
					domain?: string;
			  }
			| {
					backend: "webdav";
					path: string;
					server: string;
					port?: number;
					password?: string;
					ssl?: boolean;
					username?: string;
			  };
	};
	path?: never;
	query?: never;
	url: "/api/v1/volumes/test-connection";
};

export type TestConnectionResponses = {
	/**
	 * Connection test result
	 */
	200: {
		message: string;
		success: boolean;
	};
};

export type TestConnectionResponse = TestConnectionResponses[keyof TestConnectionResponses];

export type DeleteVolumeData = {
	body?: never;
	path: {
		name: string;
	};
	query?: never;
	url: "/api/v1/volumes/{name}";
};

export type DeleteVolumeResponses = {
	/**
	 * Volume deleted successfully
	 */
	200: {
		message: string;
	};
};

export type DeleteVolumeResponse = DeleteVolumeResponses[keyof DeleteVolumeResponses];

export type GetVolumeData = {
	body?: never;
	path: {
		name: string;
	};
	query?: never;
	url: "/api/v1/volumes/{name}";
};

export type GetVolumeErrors = {
	/**
	 * Volume not found
	 */
	404: unknown;
};

export type GetVolumeResponses = {
	/**
	 * Volume details
	 */
	200: {
		statfs: {
			free: number;
			total: number;
			used: number;
		};
		volume: {
			autoRemount: boolean;
			config:
				| {
						backend: "directory";
				  }
				| {
						backend: "nfs";
						exportPath: string;
						server: string;
						version: "3" | "4" | "4.1";
						port?: number;
				  }
				| {
						backend: "smb";
						password: string;
						server: string;
						share: string;
						username: string;
						vers?: "1.0" | "2.0" | "2.1" | "3.0";
						port?: number;
						domain?: string;
				  }
				| {
						backend: "webdav";
						path: string;
						server: string;
						port?: number;
						password?: string;
						ssl?: boolean;
						username?: string;
				  };
			createdAt: number;
			id: number;
			lastError: string | null;
			lastHealthCheck: number;
			name: string;
			path: string;
			status: "error" | "mounted" | "unmounted";
			type: "directory" | "nfs" | "smb" | "webdav";
			updatedAt: number;
		};
	};
};

export type GetVolumeResponse = GetVolumeResponses[keyof GetVolumeResponses];

export type UpdateVolumeData = {
	body?: {
		autoRemount?: boolean;
		config?:
			| {
					backend: "directory";
			  }
			| {
					backend: "nfs";
					exportPath: string;
					server: string;
					version: "3" | "4" | "4.1";
					port?: number;
			  }
			| {
					backend: "smb";
					password: string;
					server: string;
					share: string;
					username: string;
					vers?: "1.0" | "2.0" | "2.1" | "3.0";
					port?: number;
					domain?: string;
			  }
			| {
					backend: "webdav";
					path: string;
					server: string;
					port?: number;
					password?: string;
					ssl?: boolean;
					username?: string;
			  };
	};
	path: {
		name: string;
	};
	query?: never;
	url: "/api/v1/volumes/{name}";
};

export type UpdateVolumeErrors = {
	/**
	 * Volume not found
	 */
	404: unknown;
};

export type UpdateVolumeResponses = {
	/**
	 * Volume updated successfully
	 */
	200: {
		autoRemount: boolean;
		config:
			| {
					backend: "directory";
			  }
			| {
					backend: "nfs";
					exportPath: string;
					server: string;
					version: "3" | "4" | "4.1";
					port?: number;
			  }
			| {
					backend: "smb";
					password: string;
					server: string;
					share: string;
					username: string;
					vers?: "1.0" | "2.0" | "2.1" | "3.0";
					port?: number;
					domain?: string;
			  }
			| {
					backend: "webdav";
					path: string;
					server: string;
					port?: number;
					password?: string;
					ssl?: boolean;
					username?: string;
			  };
		createdAt: number;
		id: number;
		lastError: string | null;
		lastHealthCheck: number;
		name: string;
		path: string;
		status: "error" | "mounted" | "unmounted";
		type: "directory" | "nfs" | "smb" | "webdav";
		updatedAt: number;
	};
};

export type UpdateVolumeResponse = UpdateVolumeResponses[keyof UpdateVolumeResponses];

export type GetContainersUsingVolumeData = {
	body?: never;
	path: {
		name: string;
	};
	query?: never;
	url: "/api/v1/volumes/{name}/containers";
};

export type GetContainersUsingVolumeErrors = {
	/**
	 * Volume not found
	 */
	404: unknown;
};

export type GetContainersUsingVolumeResponses = {
	/**
	 * List of containers using the volume
	 */
	200: Array<{
		id: string;
		image: string;
		name: string;
		state: string;
	}>;
};

export type GetContainersUsingVolumeResponse =
	GetContainersUsingVolumeResponses[keyof GetContainersUsingVolumeResponses];

export type MountVolumeData = {
	body?: never;
	path: {
		name: string;
	};
	query?: never;
	url: "/api/v1/volumes/{name}/mount";
};

export type MountVolumeResponses = {
	/**
	 * Volume mounted successfully
	 */
	200: {
		status: "error" | "mounted" | "unmounted";
		error?: string;
	};
};

export type MountVolumeResponse = MountVolumeResponses[keyof MountVolumeResponses];

export type UnmountVolumeData = {
	body?: never;
	path: {
		name: string;
	};
	query?: never;
	url: "/api/v1/volumes/{name}/unmount";
};

export type UnmountVolumeResponses = {
	/**
	 * Volume unmounted successfully
	 */
	200: {
		status: "error" | "mounted" | "unmounted";
		error?: string;
	};
};

export type UnmountVolumeResponse = UnmountVolumeResponses[keyof UnmountVolumeResponses];

export type HealthCheckVolumeData = {
	body?: never;
	path: {
		name: string;
	};
	query?: never;
	url: "/api/v1/volumes/{name}/health-check";
};

export type HealthCheckVolumeErrors = {
	/**
	 * Volume not found
	 */
	404: unknown;
};

export type HealthCheckVolumeResponses = {
	/**
	 * Volume health check result
	 */
	200: {
		status: "error" | "mounted" | "unmounted";
		error?: string;
	};
};

export type HealthCheckVolumeResponse = HealthCheckVolumeResponses[keyof HealthCheckVolumeResponses];

export type ListFilesData = {
	body?: never;
	path: {
		name: string;
	};
	query?: {
		/**
		 * Subdirectory path to list (relative to volume root)
		 */
		path?: string;
	};
	url: "/api/v1/volumes/{name}/files";
};

export type ListFilesResponses = {
	/**
	 * List of files in the volume
	 */
	200: {
		files: Array<{
			name: string;
			path: string;
			type: "directory" | "file";
			modifiedAt?: number;
			size?: number;
		}>;
		path: string;
	};
};

export type ListFilesResponse = ListFilesResponses[keyof ListFilesResponses];

export type ListRepositoriesData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/repositories";
};

export type ListRepositoriesResponses = {
	/**
	 * List of repositories
	 */
	200: Array<{
		compressionMode: "auto" | "better" | "fastest" | "max" | "off" | null;
		config:
			| {
					accessKeyId: string;
					backend: "s3";
					bucket: string;
					endpoint: string;
					secretAccessKey: string;
			  }
			| {
					backend: "local";
					path: string;
			  };
		createdAt: number;
		id: string;
		lastChecked: number | null;
		lastError: string | null;
		name: string;
		status: "error" | "healthy" | "unknown" | null;
		type: "local" | "s3";
		updatedAt: number;
	}>;
};

export type ListRepositoriesResponse = ListRepositoriesResponses[keyof ListRepositoriesResponses];

export type CreateRepositoryData = {
	body?: {
		config:
			| {
					accessKeyId: string;
					backend: "s3";
					bucket: string;
					endpoint: string;
					secretAccessKey: string;
			  }
			| {
					backend: "local";
					path: string;
			  };
		name: string;
		compressionMode?: "auto" | "better" | "fastest" | "max" | "off";
	};
	path?: never;
	query?: never;
	url: "/api/v1/repositories";
};

export type CreateRepositoryResponses = {
	/**
	 * Repository created successfully
	 */
	201: {
		message: string;
		repository: {
			id: string;
			name: string;
		};
	};
};

export type CreateRepositoryResponse = CreateRepositoryResponses[keyof CreateRepositoryResponses];

export type DeleteRepositoryData = {
	body?: never;
	path: {
		name: string;
	};
	query?: never;
	url: "/api/v1/repositories/{name}";
};

export type DeleteRepositoryResponses = {
	/**
	 * Repository deleted successfully
	 */
	200: {
		message: string;
	};
};

export type DeleteRepositoryResponse = DeleteRepositoryResponses[keyof DeleteRepositoryResponses];

export type GetRepositoryData = {
	body?: never;
	path: {
		name: string;
	};
	query?: never;
	url: "/api/v1/repositories/{name}";
};

export type GetRepositoryResponses = {
	/**
	 * Repository details
	 */
	200: {
		compressionMode: "auto" | "better" | "fastest" | "max" | "off" | null;
		config:
			| {
					accessKeyId: string;
					backend: "s3";
					bucket: string;
					endpoint: string;
					secretAccessKey: string;
			  }
			| {
					backend: "local";
					path: string;
			  };
		createdAt: number;
		id: string;
		lastChecked: number | null;
		lastError: string | null;
		name: string;
		status: "error" | "healthy" | "unknown" | null;
		type: "local" | "s3";
		updatedAt: number;
	};
};

export type GetRepositoryResponse = GetRepositoryResponses[keyof GetRepositoryResponses];

export type ListSnapshotsData = {
	body?: never;
	path: {
		name: string;
	};
	query?: {
		volumeId?: number;
	};
	url: "/api/v1/repositories/{name}/snapshots";
};

export type ListSnapshotsResponses = {
	/**
	 * List of snapshots
	 */
	200: {
		snapshots: Array<{
			duration: number;
			paths: Array<string>;
			short_id: string;
			size: number;
			time: number;
		}>;
	};
};

export type ListSnapshotsResponse = ListSnapshotsResponses[keyof ListSnapshotsResponses];

export type ListBackupSchedulesData = {
	body?: never;
	path?: never;
	query?: never;
	url: "/api/v1/backups";
};

export type ListBackupSchedulesResponses = {
	/**
	 * List of backup schedules
	 */
	200: Array<{
		createdAt: number;
		cronExpression: string;
		enabled: boolean;
		excludePatterns: Array<string> | null;
		id: number;
		includePatterns: Array<string> | null;
		lastBackupAt: number | null;
		lastBackupError: string | null;
		lastBackupStatus: "error" | "success" | null;
		nextBackupAt: number | null;
		repositoryId: string;
		retentionPolicy: {
			keepDaily?: number;
			keepHourly?: number;
			keepLast?: number;
			keepMonthly?: number;
			keepWeekly?: number;
			keepWithinDuration?: string;
			keepYearly?: number;
		} | null;
		updatedAt: number;
		volumeId: number;
	}>;
};

export type ListBackupSchedulesResponse = ListBackupSchedulesResponses[keyof ListBackupSchedulesResponses];

export type CreateBackupScheduleData = {
	body?: {
		cronExpression: string;
		enabled: boolean;
		repositoryId: string;
		volumeId: number;
		excludePatterns?: Array<string>;
		includePatterns?: Array<string>;
		retentionPolicy?: {
			keepDaily?: number;
			keepHourly?: number;
			keepLast?: number;
			keepMonthly?: number;
			keepWeekly?: number;
			keepWithinDuration?: string;
			keepYearly?: number;
		};
		tags?: Array<string>;
	};
	path?: never;
	query?: never;
	url: "/api/v1/backups";
};

export type CreateBackupScheduleResponses = {
	/**
	 * Backup schedule created successfully
	 */
	201: {
		createdAt: number;
		cronExpression: string;
		enabled: boolean;
		excludePatterns: Array<string> | null;
		id: number;
		includePatterns: Array<string> | null;
		lastBackupAt: number | null;
		lastBackupError: string | null;
		lastBackupStatus: "error" | "success" | null;
		nextBackupAt: number | null;
		repositoryId: string;
		retentionPolicy: {
			keepDaily?: number;
			keepHourly?: number;
			keepLast?: number;
			keepMonthly?: number;
			keepWeekly?: number;
			keepWithinDuration?: string;
			keepYearly?: number;
		} | null;
		updatedAt: number;
		volumeId: number;
	};
};

export type CreateBackupScheduleResponse = CreateBackupScheduleResponses[keyof CreateBackupScheduleResponses];

export type DeleteBackupScheduleData = {
	body?: never;
	path: {
		scheduleId: string;
	};
	query?: never;
	url: "/api/v1/backups/{scheduleId}";
};

export type DeleteBackupScheduleResponses = {
	/**
	 * Backup schedule deleted successfully
	 */
	200: {
		success: boolean;
	};
};

export type DeleteBackupScheduleResponse = DeleteBackupScheduleResponses[keyof DeleteBackupScheduleResponses];

export type GetBackupScheduleData = {
	body?: never;
	path: {
		scheduleId: string;
	};
	query?: never;
	url: "/api/v1/backups/{scheduleId}";
};

export type GetBackupScheduleResponses = {
	/**
	 * Backup schedule details
	 */
	200: {
		createdAt: number;
		cronExpression: string;
		enabled: boolean;
		excludePatterns: Array<string> | null;
		id: number;
		includePatterns: Array<string> | null;
		lastBackupAt: number | null;
		lastBackupError: string | null;
		lastBackupStatus: "error" | "success" | null;
		nextBackupAt: number | null;
		repositoryId: string;
		retentionPolicy: {
			keepDaily?: number;
			keepHourly?: number;
			keepLast?: number;
			keepMonthly?: number;
			keepWeekly?: number;
			keepWithinDuration?: string;
			keepYearly?: number;
		} | null;
		updatedAt: number;
		volumeId: number;
	};
};

export type GetBackupScheduleResponse = GetBackupScheduleResponses[keyof GetBackupScheduleResponses];

export type UpdateBackupScheduleData = {
	body?: {
		cronExpression?: string;
		enabled?: boolean;
		excludePatterns?: Array<string>;
		includePatterns?: Array<string>;
		repositoryId?: string;
		retentionPolicy?: {
			keepDaily?: number;
			keepHourly?: number;
			keepLast?: number;
			keepMonthly?: number;
			keepWeekly?: number;
			keepWithinDuration?: string;
			keepYearly?: number;
		};
		tags?: Array<string>;
	};
	path: {
		scheduleId: string;
	};
	query?: never;
	url: "/api/v1/backups/{scheduleId}";
};

export type UpdateBackupScheduleResponses = {
	/**
	 * Backup schedule updated successfully
	 */
	200: {
		createdAt: number;
		cronExpression: string;
		enabled: boolean;
		excludePatterns: Array<string> | null;
		id: number;
		includePatterns: Array<string> | null;
		lastBackupAt: number | null;
		lastBackupError: string | null;
		lastBackupStatus: "error" | "success" | null;
		nextBackupAt: number | null;
		repositoryId: string;
		retentionPolicy: {
			keepDaily?: number;
			keepHourly?: number;
			keepLast?: number;
			keepMonthly?: number;
			keepWeekly?: number;
			keepWithinDuration?: string;
			keepYearly?: number;
		} | null;
		updatedAt: number;
		volumeId: number;
	};
};

export type UpdateBackupScheduleResponse = UpdateBackupScheduleResponses[keyof UpdateBackupScheduleResponses];

export type GetBackupScheduleForVolumeData = {
	body?: never;
	path: {
		volumeId: string;
	};
	query?: never;
	url: "/api/v1/backups/volume/{volumeId}";
};

export type GetBackupScheduleForVolumeResponses = {
	/**
	 * Backup schedule details for the volume
	 */
	200: {
		createdAt: number;
		cronExpression: string;
		enabled: boolean;
		excludePatterns: Array<string> | null;
		id: number;
		includePatterns: Array<string> | null;
		lastBackupAt: number | null;
		lastBackupError: string | null;
		lastBackupStatus: "error" | "success" | null;
		nextBackupAt: number | null;
		repositoryId: string;
		retentionPolicy: {
			keepDaily?: number;
			keepHourly?: number;
			keepLast?: number;
			keepMonthly?: number;
			keepWeekly?: number;
			keepWithinDuration?: string;
			keepYearly?: number;
		} | null;
		updatedAt: number;
		volumeId: number;
	} | null;
};

export type GetBackupScheduleForVolumeResponse =
	GetBackupScheduleForVolumeResponses[keyof GetBackupScheduleForVolumeResponses];

export type UpsertBackupScheduleData = {
	body?: {
		cronExpression: string;
		enabled: boolean;
		repositoryId: string;
		volumeId: number;
		excludePatterns?: Array<string>;
		includePatterns?: Array<string>;
		retentionPolicy?: {
			keepDaily?: number;
			keepHourly?: number;
			keepLast?: number;
			keepMonthly?: number;
			keepWeekly?: number;
			keepWithinDuration?: string;
			keepYearly?: number;
		};
		tags?: Array<string>;
	};
	path?: never;
	query?: never;
	url: "/api/v1/backups/upsert";
};

export type UpsertBackupScheduleResponses = {
	/**
	 * Backup schedule upserted successfully
	 */
	200: {
		createdAt: number;
		cronExpression: string;
		enabled: boolean;
		excludePatterns: Array<string> | null;
		id: number;
		includePatterns: Array<string> | null;
		lastBackupAt: number | null;
		lastBackupError: string | null;
		lastBackupStatus: "error" | "success" | null;
		nextBackupAt: number | null;
		repositoryId: string;
		retentionPolicy: {
			keepDaily?: number;
			keepHourly?: number;
			keepLast?: number;
			keepMonthly?: number;
			keepWeekly?: number;
			keepWithinDuration?: string;
			keepYearly?: number;
		} | null;
		updatedAt: number;
		volumeId: number;
	};
};

export type UpsertBackupScheduleResponse = UpsertBackupScheduleResponses[keyof UpsertBackupScheduleResponses];

export type RunBackupNowData = {
	body?: never;
	path: {
		scheduleId: string;
	};
	query?: never;
	url: "/api/v1/backups/{scheduleId}/run";
};

export type RunBackupNowResponses = {
	/**
	 * Backup started successfully
	 */
	200: {
		success: boolean;
	};
};

export type RunBackupNowResponse = RunBackupNowResponses[keyof RunBackupNowResponses];

export type ClientOptions = {
	baseUrl: "http://192.168.2.42:4096" | (string & {});
};
